# Generated by Django 5.1.2 on 2025-01-26 14:11

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customer', '0001_initial'),
        ('notification', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('city', models.CharField(max_length=255)),
                ('district', models.CharField(max_length=255)),
                ('neighborhood', models.CharField(max_length=255)),
                ('street', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Models',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to='models/')),
                ('type', models.CharField(choices=[('YOLOV8', 'YOLOv8'), ('TENSORRT', 'TensorRT'), ('OPENVINO', 'OpenVINO')], max_length=50)),
                ('sample_image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('notes', models.TextField(blank=True, null=True)),
                ('class_item', models.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RulesList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('level', models.IntegerField()),
                ('icon', models.ImageField(blank=True, null=True, upload_to='rules/icons/')),
                ('description', models.TextField(blank=True, null=True)),
                ('value', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('models', models.ManyToManyField(blank=True, related_name='services', to='services.models')),
            ],
        ),
        migrations.CreateModel(
            name='Sources',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('url', models.CharField(default='RTSP://', max_length=255)),
                ('type', models.CharField(max_length=255)),
                ('addtype', models.CharField(blank=True, max_length=255, null=True)),
                ('fps', models.IntegerField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('status', models.CharField(blank=True, default='0', max_length=50, null=True)),
                ('resolution', models.CharField(blank=True, max_length=50, null=True)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('is_mobile', models.BooleanField(default=False)),
                ('is_record', models.BooleanField(default=False)),
                ('record_folder', models.CharField(blank=True, max_length=255, null=True)),
                ('codec', models.CharField(blank=True, max_length=10, null=True)),
                ('total_frames', models.IntegerField(blank=True, null=True)),
                ('polygons', models.JSONField(blank=True, help_text="Store polygon data as list of objects: [{coordinates: [[x1,y1], [x2,y2],...], label: 'string', color: 'string', transition_lines: [[[x1,y1], [x2,y2]], ...], crossing_direction: ['left-to-right', ...]}]", null=True)),
                ('inlocation', models.ManyToManyField(blank=True, related_name='sources', to='services.location')),
            ],
        ),
        migrations.CreateModel(
            name='Reports',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('level', models.CharField(choices=[('LOW', 'Low'), ('MEDIUM', 'Medium'), ('HIGH', 'High')], max_length=50)),
                ('status', models.CharField(choices=[('OPEN', 'Open'), ('IN_PROGRESS', 'In Progress'), ('CLOSED', 'Closed')], max_length=50)),
                ('captured_image', models.ImageField(blank=True, null=True, upload_to='reports/images/')),
                ('video_clip', models.FileField(blank=True, null=True, upload_to='reports/videos/')),
                ('assigned_to', models.ManyToManyField(blank=True, related_name='assigned_reports', to=settings.AUTH_USER_MODEL)),
                ('departments', models.ManyToManyField(blank=True, related_name='reports', to='customer.department')),
                ('notifications', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='notification.notification')),
                ('status_changed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='status_changed_reports', to=settings.AUTH_USER_MODEL)),
                ('sources', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='services.sources')),
            ],
        ),
    ]
